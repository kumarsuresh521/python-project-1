"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('HUB_EXAMPLE_CATALOG_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('HUB_EXAMPLE_CATALOG_DEBUG')

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.postgres'
]

THIRD_PARTY_APP = [
    'rest_framework',
    'django_filters'
]

LOCAL_APPS = [
    'app',
    'catalog',
]

INSTALLED_APPS += THIRD_PARTY_APP + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.common.CommonMiddleware',
]

APP_VERSION = [
    'v1',
]

ROOT_URLCONF = 'example.urls'

WSGI_APPLICATION = 'example.wsgi.application'

### REST FRAMEWORK SETTING ###
'''
Namespaces are one honking great idea - let's do more of those!

Configuration for REST framework is all namespaced inside a
single Django setting, named REST_FRAMEWORK.

If you need to access the values of REST framework's API
settings in your project, you should use the api_settings
object.

from rest_framework.settings import api_settings
'''
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'example.core.renderers.ApiRenderer',
    ),
    'EXCEPTION_HANDLER': 'example.core.exceptions.api_exception_handler',
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',)
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('HUB_EXAMPLE_CATALOG_DATABASE_NAME'),
        'USER': os.environ.get('HUB_EXAMPLE_CATALOG_DATABASE_USERNAME'),
        'PASSWORD': os.environ.get('HUB_EXAMPLE_CATALOG_DATABASE_PASSWORD'),
        'HOST': os.environ.get('HUB_EXAMPLE_CATALOG_DATABASE_HOST'),
        'PORT': os.environ.get('HUB_EXAMPLE_CATALOG_DATABASE_PORT'),
    }
}

HUB_EXAMPLE_USER_KAFKA_SERVER = os.environ.get('HUB_EXAMPLE_USER_KAFKA_SERVER')
AWS_STORAGE_BUCKET_NAME = os.environ.get('HUB_EXAMPLE_CATALOG_AWS_STORAGE_BUCKET_NAME')
S3DIRECT_REGION = os.environ.get('HUB_EXAMPLE_CATALOG_S3DIRECT_REGION')
AWS_ACCESS_KEY_ID = os.environ.get('HUB_EXAMPLE_CATALOG_AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('HUB_EXAMPLE_CATALOG_AWS_SECRET_ACCESS_KEY')
AWS_IMAGE_URL = os.environ.get('HUB_EXAMPLE_CATALOG_AWS_IMAGE_URL')
AWS_STORE_CAMPAIGN_PATH = os.environ.get('HUB_EXAMPLE_CATALOG_AWS_STORE_CAMPAIGN_PATH')


ENABLE_KAFKA = os.environ.get('HUB_EXAMPLE_CATALOG_ENABLE_KAFKA')
